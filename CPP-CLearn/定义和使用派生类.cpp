//继承是原来类的扩展, 比如从人类扩展到老师, 学生 ... 这些的共性是人类, 数学上提取公因式
//重写(覆盖)是对继承得来的函数的丰富与改变.	比如中国人, 俄罗斯人都是人, 人能说话(越大的概念越笼统), 但中国人说汉语, 俄国人说俄语, 这就要对人说话的函数进行丰富改变, 适应具体情况
//访问控制:	继承不能全搬全拿, 有些东西不能让下面的类摸到, 所以要保护起来, 可以用, 但必须通过基类来用, 不能自己随便用 ,本质是为了数据保护
//严格的访问控制相当于是未成年人必须在监护人陪同下使用的要求, 继承是能继承, 就是使用起来会有限制
#include<iostream>

using namespace std;

//基类
class People {
public:
	int id;
	void say() {
		cout << "I'm a person! My id is "<< id << endl;
	}
};

//派生类
class Student : public People{
public:
	int sid;
	int id;
	void say() {
		cout << "I'm a student! My id is" << id << endl;
	}
};

//我感觉哈, 继承派生就是在原有基类的基础上添枝加叶, 加以修饰. 可以添加新的, 可以沿用旧的, 也可以把旧的推到重来
//本质上是为了更好的代码复用, 不用重复劳动, 必要时也可以加以修改来满足需要
int main() {
	Student zs{};
	zs.id = 1001;
	zs.People::id = 2002;
	zs.say();//这里通过对比能够看到, 基类的id和say()被派生类的同名成员覆盖了
	zs.People::say();//同时咱们能看出来其实基类的成员被覆盖后还是能调用的, 写法和直接调用不一样
	return 0;
}